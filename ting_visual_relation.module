<?php

/**
 * @file
 *
 * Module file for the Ting visual relation module.
 */

/**
 * Implements hook_menu().
 */
function ting_visual_relation_menu() {
	$items = array();

	$items['ting-visual-relation/get-ting-object'] = array(
		'title' => 'Retrieve ting object',
		'description' => 'Used by the relation browser to retrieve data about ting objects',
		'page callback' => 'ting_visual_relation_get_ting_object',
		'page arguments' => array(2),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
		'file' => 'ting_visual_relation.pages.inc',
	);
  $items['ting-visual-relation/get-ting-collection'] = array(
    'title' => 'Retrieve ting collection',
    'description' => 'Used by the relation browser to retrieve data about ting collections',
    'page callback' => 'ting_visual_relation_get_ting_collection',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'ting_visual_relation.pages.inc',
  );

	return $items;
}

/**
 * Implements hook_field_info().
 */
function ting_visual_relation_field_info() {
	return array(
		'ting_visual_relations' => array(
			'label' => t('Ting visual relations'),
			'description' => t('A field type that adds an acitivator for a visual relation browser.'),
			'default_widget' => 'hidden',
			'default_formatter' => 'ting_visual_relations_default',
			// This is not a generel field intended to be added to any entity. We
			// therefore restrict access by disabling the ability to configure this
			// field from the admin UI.
			'no_ui' => TRUE,
			// See: virtual_field.api.php from virtual_field contrib module.
			'virtual_field' => array(
				'entity_types' => array('ting_object', 'ting_collection'),
				'add_widget' => TRUE,
			),
		),
	);
}

/**
 * Implements hook_field_load().
 *
 * Populate the items array with the id of the entities the field is being
 * loaded on. If we didn't do this, Field API would think that the field is
 * empty and our formatters wouldn't be called.
 */
function ting_visual_relation_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
	foreach ($entities as $id => $entity) {
		$items[$id][0] = array('id' => $id);
	}
}

/**
 * Implements hook_widget_info_alter().
 *
 * We implement this hook to add our field type to the list of supported
 * fields, for the 'hidden' field widget defined in core.
 */
function ting_visual_relation_widget_info_alter(&$info) {
	if (isset($info['hidden'])) {
		$info['hidden']['field types'][] = 'ting_visual_relations';
	}
}

/**
 * Implements hook_field_formatter_info().
 */
function ting_visual_relation_field_formatter_info() {
	return array(
		'ting_visual_relations_default' => array(
			'label' => t('Default'),
			'field types' => array(
				'ting_visual_relations',
			),
		),
	);
}

/**
 * Implements hook_field_formatter_view().
 */
function ting_visual_relation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
	// Build the element array as required by Field API.
	foreach ($items as $delta => $item) {
		$output = '<span class="ting-visual-relations-activator">' . t('Browse relations') . '</span>';
		$element[$delta] = array(
			'#markup' => $output,
		);
	}
	// Add CSS and JS for our field:
	$path = drupal_get_path('module', 'ting_visual_relation');
	$element['#attached']['js'][] = $path . '/js/ting_visual_relation.field.js';
	$element['#attached']['css'][] = $path . '/css/ting_visual_relation.field.css';
	return $element;
}

/**
 * Implements hook_process_ting_object().
 */
function ting_visual_relation_process_ting_object(&$vars) {

}

